// This file is @generated by wasmcloud/weld-codegen 0.5.0.
// It is not intended for manual editing.
// namespace: com.cosmonic.samples.mcchat.chatlog

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct CanonicalChatMessage {
    #[serde(default)]
    pub body: String,
    #[serde(rename = "channelName")]
    #[serde(default)]
    pub channel_name: String,
    #[serde(default)]
    pub id: String,
    #[serde(rename = "sourceUser")]
    #[serde(default)]
    pub source_user: String,
}

// Encode CanonicalChatMessage as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_canonical_chat_message<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &CanonicalChatMessage,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(4)?;
    e.str("body")?;
    e.str(&val.body)?;
    e.str("channelName")?;
    e.str(&val.channel_name)?;
    e.str("id")?;
    e.str(&val.id)?;
    e.str("sourceUser")?;
    e.str(&val.source_user)?;
    Ok(())
}

// Decode CanonicalChatMessage from cbor input stream
#[doc(hidden)]
pub fn decode_canonical_chat_message(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<CanonicalChatMessage, RpcError> {
    let __result = {
        let mut body: Option<String> = None;
        let mut channel_name: Option<String> = None;
        let mut id: Option<String> = None;
        let mut source_user: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct CanonicalChatMessage, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => body = Some(d.str()?.to_string()),
                    1 => channel_name = Some(d.str()?.to_string()),
                    2 => id = Some(d.str()?.to_string()),
                    3 => source_user = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "body" => body = Some(d.str()?.to_string()),
                    "channelName" => channel_name = Some(d.str()?.to_string()),
                    "id" => id = Some(d.str()?.to_string()),
                    "sourceUser" => source_user = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        CanonicalChatMessage {
            body: if let Some(__x) = body {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CanonicalChatMessage.body (#0)".to_string(),
                ));
            },

            channel_name: if let Some(__x) = channel_name {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CanonicalChatMessage.channel_name (#1)".to_string(),
                ));
            },

            id: if let Some(__x) = id {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CanonicalChatMessage.id (#2)".to_string(),
                ));
            },

            source_user: if let Some(__x) = source_user {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CanonicalChatMessage.source_user (#3)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
pub type MessagesList = Vec<CanonicalChatMessage>;

// Encode MessagesList as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_messages_list<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &MessagesList,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.array(val.len() as u64)?;
    for item in val.iter() {
        encode_canonical_chat_message(e, item)?;
    }
    Ok(())
}

// Decode MessagesList from cbor input stream
#[doc(hidden)]
pub fn decode_messages_list(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<MessagesList, RpcError> {
    let __result = {
        if let Some(n) = d.array()? {
            let mut arr: Vec<CanonicalChatMessage> = Vec::with_capacity(n as usize);
            for _ in 0..(n as usize) {
                arr.push(decode_canonical_chat_message(d).map_err(|e| {
                    format!(
                        "decoding 'com.cosmonic.samples.mcchat.chatlog#CanonicalChatMessage': {}",
                        e
                    )
                })?)
            }
            arr
        } else {
            // indefinite array
            let mut arr: Vec<CanonicalChatMessage> = Vec::new();
            loop {
                match d.datatype() {
                                Err(_) => break,
                                Ok(wasmbus_rpc::cbor::Type::Break) => break,
                                Ok(_) => arr.push(decode_canonical_chat_message(d).map_err(|e| format!("decoding 'com.cosmonic.samples.mcchat.chatlog#CanonicalChatMessage': {}", e))?)
                            }
            }
            arr
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct WriteMessageResponse {
    #[serde(default)]
    pub accepted: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
}

// Encode WriteMessageResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_write_message_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &WriteMessageResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    e.str("accepted")?;
    e.bool(val.accepted)?;
    if let Some(val) = val.reason.as_ref() {
        e.str("reason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode WriteMessageResponse from cbor input stream
#[doc(hidden)]
pub fn decode_write_message_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<WriteMessageResponse, RpcError> {
    let __result = {
        let mut accepted: Option<bool> = None;
        let mut reason: Option<Option<String>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct WriteMessageResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => accepted = Some(d.bool()?),
                    1 => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "accepted" => accepted = Some(d.bool()?),
                    "reason" => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        WriteMessageResponse {
            accepted: if let Some(__x) = accepted {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field WriteMessageResponse.accepted (#0)".to_string(),
                ));
            },
            reason: reason.unwrap(),
        }
    };
    Ok(__result)
}
/// wasmbus.actorReceive
#[async_trait]
pub trait Chatlog {
    async fn write_message(
        &self,
        ctx: &Context,
        arg: &CanonicalChatMessage,
    ) -> RpcResult<WriteMessageResponse>;
    async fn get_messages(&self, ctx: &Context) -> RpcResult<MessagesList>;
}

/// ChatlogReceiver receives messages defined in the Chatlog service trait
#[doc(hidden)]
#[async_trait]
pub trait ChatlogReceiver: MessageDispatch + Chatlog {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "WriteMessage" => {
                let value: CanonicalChatMessage = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'CanonicalChatMessage': {}", e)))?;

                let resp = Chatlog::write_message(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "GetMessages" => {
                let resp = Chatlog::get_messages(self, ctx).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Chatlog::{}",
                message.method
            ))),
        }
    }
}

/// ChatlogSender sends messages to a Chatlog service
/// client for sending Chatlog messages
#[derive(Debug)]
pub struct ChatlogSender<T: Transport> {
    transport: T,
}

impl<T: Transport> ChatlogSender<T> {
    /// Constructs a ChatlogSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> ChatlogSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl ChatlogSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Chatlog for ChatlogSender<T> {
    #[allow(unused)]
    async fn write_message(
        &self,
        ctx: &Context,
        arg: &CanonicalChatMessage,
    ) -> RpcResult<WriteMessageResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Chatlog.WriteMessage",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: WriteMessageResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': WriteMessageResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn get_messages(&self, ctx: &Context) -> RpcResult<MessagesList> {
        let buf = *b"";
        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Chatlog.GetMessages",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: MessagesList = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': MessagesList", e)))?;
        Ok(value)
    }
}
